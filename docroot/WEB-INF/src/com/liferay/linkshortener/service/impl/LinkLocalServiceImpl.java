/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.linkshortener.service.impl;

import com.liferay.linkshortener.NoSuchLinkException;
import com.liferay.linkshortener.ShortLinkTakenException;
import com.liferay.linkshortener.model.Link;
import com.liferay.linkshortener.service.base.LinkLocalServiceBaseImpl;
import com.liferay.linkshortener.service.util.ShortURLUtil;
import com.liferay.portal.kernel.dao.orm.ORMException;
import com.liferay.portal.kernel.dao.orm.QueryPos;
import com.liferay.portal.kernel.dao.orm.SQLQuery;
import com.liferay.portal.kernel.dao.orm.Session;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.transaction.Isolation;
import com.liferay.portal.kernel.transaction.Propagation;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.CalendarUtil;
import com.liferay.util.dao.orm.CustomSQLUtil;

import java.sql.Timestamp;

import java.util.Date;
import java.util.List;

import static com.liferay.linkshortener.util.ApplicationConstants.AUTO_SHORTEN_PREFIX;

/**
 * The implementation of the link local service. <p/>
 *
 * <p>
 * All custom service methods should be put in this class. Whenever methods are
 * added, rerun ServiceBuilder to copy their definitions into the {@link
 * com.liferay.linkshortener.service.LinkLocalService} interface. <p/> <p> This
 * is a local service. Methods of this service will not have security checks
 * based on the propagated JAAS credentials because this service can only be
 * accessed from within the same VM.
 * </p>
 *
 * @author Miroslav Ligas
 * @see    com.liferay.linkshortener.service.base.LinkLocalServiceBaseImpl
 * @see    com.liferay.linkshortener.service.LinkLocalServiceUtil
 */
public class LinkLocalServiceImpl extends LinkLocalServiceBaseImpl {

	/**
	 * Method checks if the short link is already used. If the link is used an
	 * Exception will be thrown. If the link is unused the original link will be
	 * checked if it is already in the database. If the link is found, it will
	 * be returned otherwise a new link will be stored to database and all
	 * appropriate model listeners will be notified.
	 *
	 * @param  link the link
	 * @return the link that was added
	 * @throws com.liferay.linkshortener.ShortLinkTakenException if the short
	 *         link is already taken
	 */
	@Override
	public Link addLinkWithCheck(Link link)
		throws ShortLinkTakenException, SystemException {

		Link result;

		if (link.isAutoGen()) {
			result = storeAutoGeneratedLink(link);
		}
		else {
			result = storeCustomLink(link);
		}

		return result;
	}

	/**
	 * Deletes all the Links that were not modified after the specified date.
	 *
	 * @param olderThen boundary date for the deletion.
	 */
	@Override
	@Transactional(
		isolation = Isolation.READ_COMMITTED,
		propagation = Propagation.REQUIRES_NEW)
	public void deleteOldRecords(Date olderThen) {

		try {
			Session session = linkPersistence.openSession();

			String sql = CustomSQLUtil.get(_DELETE_LINKS);

			SQLQuery sqlQuery = session.createSQLQuery(sql);

			QueryPos qPos = QueryPos.getInstance(sqlQuery);

			Timestamp olderThenTS = CalendarUtil.getTimestamp(olderThen);

			qPos.add(olderThenTS);

			sqlQuery.executeUpdate();

			linkPersistence.closeSession(session);

		}
		catch (ORMException orme) {
			_LOG.error("Unable to remove old Links.", orme);
		}
	}

	/**
	 * Method loads links auto-generated or explicitly created links from
	 * database. Method supports paging.
	 *
	 * @param  autoGen specifies what kind of links should be loaded
	 * @param  start the lower bound of the range of links
	 * @param  end the upper bound of the range of links (not inclusive)
	 * @return the range of matching links
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public List<Link> getLinksByAutoGen(boolean autoGen, int start, int end)
		throws SystemException {

		return linkPersistence.findByAG(autoGen, start, end);
	}

	/**
	 * Method returns the link which short link matches the provided value.
	 *
	 * @param  shortLink the short link
	 * @return the matching link
	 * @throws com.liferay.linkshortener.NoSuchLinkException if a matching link
	 *         could not be found
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Link getLinksByShortLink(String shortLink)
		throws NoSuchLinkException, SystemException {

		return linkPersistence.findBySL_AG(shortLink, false);
	}

	/**
	 * Factory method for a new Link object.
	 *
	 * @return new object
	 */
	@Override
	public Link linkFactory() {
		return this.createLink(0);
	}

	/**
	 * Method checks if the short link is already taken if it was modified. If
	 * the link is free it updates the entry. Also notifies the appropriate
	 * model listeners.
	 *
	 * @param  link the link
	 * @return the link that was updated
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public Link updateLinkWithCheck(Link link)
		throws ShortLinkTakenException, SystemException {

		Link originalLink = fetchLink(link.getLinkId());

		if (!originalLink.getShortLink().equals(link.getShortLink())) {
			if (isShortLinkNotUnique(link.getShortLink())) {
				throw new ShortLinkTakenException(link.getShortLink());
			}
		}

		originalLink.setShortLink(link.getShortLink());
		originalLink.setLongLink(link.getLongLink());
		originalLink.setActive(link.getActive());
		originalLink.setModifiedDate(new Date());

		return super.updateLink(originalLink);
	}

	private Link createNewLink(Link link) throws SystemException {
		long linkId = counterLocalService.increment(Link.class.getName());
		Date now = new Date();

		Link result = linkPersistence.create(linkId);
		result.setCreateDate(now);
		result.setModifiedDate(now);
		result.setAutoGen(link.getAutoGen());
		result.setShortLink(link.getShortLink());
		result.setLongLink(link.getLongLink());
		result.setActive(true);
		return super.addLink(result);
	}

	private boolean isShortLinkNotUnique(String shortLink)
		throws SystemException {

		return !linkPersistence.findBySL(shortLink).isEmpty();
	}

	private Link storeAutoGeneratedLink(Link link)
		throws ShortLinkTakenException, SystemException {

		List<Link> links = linkPersistence.findByLL_AG(
			link.getLongLink(), true);

		Link result;

		if (links.isEmpty()) {
			Link newLink = createNewLink(link);

			String shortLink =
				AUTO_SHORTEN_PREFIX + ShortURLUtil.encode(newLink.getLinkId());

			if (isShortLinkNotUnique(shortLink)) {
				throw new ShortLinkTakenException(
					"Link '" + shortLink + "' is not unique");
			}
			else {
				newLink.setShortLink(shortLink);
				result = super.updateLink(newLink);
			}
		}
		else {
			result = links.get(0);
		}

		return result;
	}

	private Link storeCustomLink(Link link)
		throws ShortLinkTakenException, SystemException {

		if (isShortLinkNotUnique(link.getShortLink())) {
			throw new ShortLinkTakenException(
				"Link '" + link.getShortLink() + "' is not unique");
		}

		return createNewLink(link);
	}

	private static final String _DELETE_LINKS =
		LinkLocalServiceImpl.class.getName() +
			".deleteLinks";

	private static Log _LOG = LogFactoryUtil.getLog(LinkLocalServiceImpl.class);

}