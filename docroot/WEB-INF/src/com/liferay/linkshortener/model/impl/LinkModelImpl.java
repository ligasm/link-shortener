/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.linkshortener.model.impl;

import com.liferay.linkshortener.model.Link;
import com.liferay.linkshortener.model.LinkModel;
import com.liferay.linkshortener.model.LinkSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Link service. Represents a row in the &quot;LinkShortener_Link&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.linkshortener.model.LinkModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LinkImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see LinkImpl
 * @see com.liferay.linkshortener.model.Link
 * @see com.liferay.linkshortener.model.LinkModel
 * @generated
 */
@JSON(strict = true)
public class LinkModelImpl extends BaseModelImpl<Link> implements LinkModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a link model instance should use the {@link com.liferay.linkshortener.model.Link} interface instead.
	 */
	public static final String TABLE_NAME = "LinkShortener_Link";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "linkId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "longLink", Types.VARCHAR },
			{ "shortLink", Types.VARCHAR },
			{ "active_", Types.BOOLEAN },
			{ "autoGen", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table LinkShortener_Link (uuid_ VARCHAR(75) null,linkId LONG not null primary key,createDate DATE null,modifiedDate DATE null,longLink VARCHAR(75) null,shortLink VARCHAR(75) null,active_ BOOLEAN,autoGen BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table LinkShortener_Link";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.linkshortener.model.Link"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.linkshortener.model.Link"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.linkshortener.model.Link"),
			true);
	public static long AUTOGEN_COLUMN_BITMASK = 1L;
	public static long SHORTLINK_COLUMN_BITMASK = 2L;
	public static long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Link toModel(LinkSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Link model = new LinkImpl();

		model.setUuid(soapModel.getUuid());
		model.setLinkId(soapModel.getLinkId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setLongLink(soapModel.getLongLink());
		model.setShortLink(soapModel.getShortLink());
		model.setActive(soapModel.getActive());
		model.setAutoGen(soapModel.getAutoGen());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Link> toModels(LinkSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Link> models = new ArrayList<Link>(soapModels.length);

		for (LinkSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.linkshortener.model.Link"));

	public LinkModelImpl() {
	}

	public long getPrimaryKey() {
		return _linkId;
	}

	public void setPrimaryKey(long primaryKey) {
		setLinkId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_linkId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Link.class;
	}

	public String getModelClassName() {
		return Link.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("linkId", getLinkId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("longLink", getLongLink());
		attributes.put("shortLink", getShortLink());
		attributes.put("active", getActive());
		attributes.put("autoGen", getAutoGen());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long linkId = (Long)attributes.get("linkId");

		if (linkId != null) {
			setLinkId(linkId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String longLink = (String)attributes.get("longLink");

		if (longLink != null) {
			setLongLink(longLink);
		}

		String shortLink = (String)attributes.get("shortLink");

		if (shortLink != null) {
			setShortLink(shortLink);
		}

		Boolean active = (Boolean)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Boolean autoGen = (Boolean)attributes.get("autoGen");

		if (autoGen != null) {
			setAutoGen(autoGen);
		}
	}

	@JSON
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	public long getLinkId() {
		return _linkId;
	}

	public void setLinkId(long linkId) {
		_linkId = linkId;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getLongLink() {
		if (_longLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _longLink;
		}
	}

	public void setLongLink(String longLink) {
		_longLink = longLink;
	}

	@JSON
	public String getShortLink() {
		if (_shortLink == null) {
			return StringPool.BLANK;
		}
		else {
			return _shortLink;
		}
	}

	public void setShortLink(String shortLink) {
		_columnBitmask |= SHORTLINK_COLUMN_BITMASK;

		if (_originalShortLink == null) {
			_originalShortLink = _shortLink;
		}

		_shortLink = shortLink;
	}

	public String getOriginalShortLink() {
		return GetterUtil.getString(_originalShortLink);
	}

	@JSON
	public boolean getActive() {
		return _active;
	}

	public boolean isActive() {
		return _active;
	}

	public void setActive(boolean active) {
		_active = active;
	}

	@JSON
	public boolean getAutoGen() {
		return _autoGen;
	}

	public boolean isAutoGen() {
		return _autoGen;
	}

	public void setAutoGen(boolean autoGen) {
		_columnBitmask |= AUTOGEN_COLUMN_BITMASK;

		if (!_setOriginalAutoGen) {
			_setOriginalAutoGen = true;

			_originalAutoGen = _autoGen;
		}

		_autoGen = autoGen;
	}

	public boolean getOriginalAutoGen() {
		return _originalAutoGen;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Link.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Link toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Link)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public Link toUnescapedModel() {
		return (Link)this;
	}

	@Override
	public Object clone() {
		LinkImpl linkImpl = new LinkImpl();

		linkImpl.setUuid(getUuid());
		linkImpl.setLinkId(getLinkId());
		linkImpl.setCreateDate(getCreateDate());
		linkImpl.setModifiedDate(getModifiedDate());
		linkImpl.setLongLink(getLongLink());
		linkImpl.setShortLink(getShortLink());
		linkImpl.setActive(getActive());
		linkImpl.setAutoGen(getAutoGen());

		linkImpl.resetOriginalValues();

		return linkImpl;
	}

	public int compareTo(Link link) {
		long primaryKey = link.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Link)) {
			return false;
		}

		Link link = (Link)obj;

		long primaryKey = link.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LinkModelImpl linkModelImpl = this;

		linkModelImpl._originalUuid = linkModelImpl._uuid;

		linkModelImpl._originalShortLink = linkModelImpl._shortLink;

		linkModelImpl._originalAutoGen = linkModelImpl._autoGen;

		linkModelImpl._setOriginalAutoGen = false;

		linkModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Link> toCacheModel() {
		LinkCacheModel linkCacheModel = new LinkCacheModel();

		linkCacheModel.uuid = getUuid();

		String uuid = linkCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			linkCacheModel.uuid = null;
		}

		linkCacheModel.linkId = getLinkId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			linkCacheModel.createDate = createDate.getTime();
		}
		else {
			linkCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			linkCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			linkCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		linkCacheModel.longLink = getLongLink();

		String longLink = linkCacheModel.longLink;

		if ((longLink != null) && (longLink.length() == 0)) {
			linkCacheModel.longLink = null;
		}

		linkCacheModel.shortLink = getShortLink();

		String shortLink = linkCacheModel.shortLink;

		if ((shortLink != null) && (shortLink.length() == 0)) {
			linkCacheModel.shortLink = null;
		}

		linkCacheModel.active = getActive();

		linkCacheModel.autoGen = getAutoGen();

		return linkCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", linkId=");
		sb.append(getLinkId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", longLink=");
		sb.append(getLongLink());
		sb.append(", shortLink=");
		sb.append(getShortLink());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", autoGen=");
		sb.append(getAutoGen());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.linkshortener.model.Link");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>linkId</column-name><column-value><![CDATA[");
		sb.append(getLinkId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longLink</column-name><column-value><![CDATA[");
		sb.append(getLongLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shortLink</column-name><column-value><![CDATA[");
		sb.append(getShortLink());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>autoGen</column-name><column-value><![CDATA[");
		sb.append(getAutoGen());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Link.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { Link.class };
	private String _uuid;
	private String _originalUuid;
	private long _linkId;
	private Date _createDate;
	private Date _modifiedDate;
	private String _longLink;
	private String _shortLink;
	private String _originalShortLink;
	private boolean _active;
	private boolean _autoGen;
	private boolean _originalAutoGen;
	private boolean _setOriginalAutoGen;
	private long _columnBitmask;
	private Link _escapedModel;
}